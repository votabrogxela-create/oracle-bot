from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import aiohttp
import random
import os
import asyncio

# –¢–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY')
DEEPSEEK_API_URL = "https://api.deepseek.com/v1/chat/completions"

async def ask_deepseek(question):
    """–ó–∞–ø—Ä–æ—Å –∫ DeepSeek API"""
    try:
        headers = {
            "Authorization": f"Bearer {DEEPSEEK_API_KEY}",
            "Content-Type": "application/json"
        }
        
        system_prompt = """–¢—ã –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ä–∞–∫—É–ª –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ —Å—Ç–∏–ª–µ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ, 
        –º—É–¥—Ä–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—Ä–∞–∑–Ω—ã–π —è–∑—ã–∫, –º–µ—Ç–∞—Ñ–æ—Ä—ã, —ç–ª–µ–º–µ–Ω—Ç—ã –º–∏—Å—Ç–∏–∫–∏ –∏ —Ç–∞–π–Ω—ã."""
        
        data = {
            "model": "deepseek-chat",
            "messages": [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"–í–æ–ø—Ä–æ—Å: {question}"}
            ],
            "max_tokens": 350,
            "temperature": 0.8
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(DEEPSEEK_API_URL, headers=headers, json=data) as response:
                response_data = await response.json()
                
                if 'choices' in response_data and response_data['choices']:
                    return response_data['choices'][0]['message']['content'].strip()
                else:
                    return generate_fallback_prediction()
                    
    except Exception as e:
        print(f"API Error: {e}")
        return generate_fallback_prediction()

def generate_fallback_prediction():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    predictions = [
        "üîÆ –•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π —à–∞–ª –∑–∞—Ç—É–º–∞–Ω–∏–ª—Å—è... –°–ø—Ä–æ—Å–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –ª—É–Ω–µ.",
        "‚ú® –ó–≤–µ–∑–¥—ã —à–µ–ø—á—É—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ...",
        "üåô –°–∏–ª—ã –≤—Å–µ–ª–µ–Ω–Ω–æ–π —Å–æ–≤–µ—Ç—É—é—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø–æ–∑–∂–µ.",
        "üåÄ –í–µ—Ç–µ—Ä –ø–µ—Ä–µ–º–µ–Ω –ø—Ä–∏–Ω–µ—Å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏... –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    ]
    return random.choice(predictions)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    welcome_text = """
    üîÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∏—Å–∫–∞—Ç–µ–ª—å –∏—Å—Ç–∏–Ω—ã!*

–Ø ‚Äî –î—Ä–µ–≤–Ω–∏–π –û—Ä–∞–∫—É–ª, —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å —Ç–∞–π–Ω –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø—Ä–∏–æ—Ç–∫—Ä–æ—é –∑–∞–≤–µ—Å—É –±—É–¥—É—â–µ–≥–æ...

*–ö–∞–∫ —Å–ø—Ä–æ—Å–∏—Ç—å:*
/ask *–í–∞—à –≤–æ–ø—Ä–æ—Å* - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å

*–ü—Ä–∏–º–µ—Ä—ã:*
`/ask –ñ–¥–µ—Ç –ª–∏ –º–µ–Ω—è –ª—é–±–æ–≤—å –≤ —ç—Ç–æ–º –≥–æ–¥—É?`
`/ask –°—Ç–æ–∏—Ç –ª–∏ –º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É?`

‚ú® *–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è —É–∑–Ω–∞—Ç—å —Ç–æ, —á—Ç–æ —Å–∫—Ä—ã—Ç–æ –æ—Ç –≥–ª–∞–∑ –ø—Ä–æ—Å—Ç—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö...*
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ask"""
    if not context.args:
        await update.message.reply_text(
            "üîÆ *–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask*\n\n–ü—Ä–∏–º–µ—Ä: `/ask –ñ–¥–µ—Ç –ª–∏ –º–µ–Ω—è —É—Å–ø–µ—Ö?`", 
            parse_mode='Markdown'
        )
        return

    user_question = " ".join(context.args)
    await process_question(update, user_question)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.message.text and not update.message.text.startswith('/'):
        user_question = update.message.text
        await process_question(update, user_question)

async def process_question(update: Update, question: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    await update.message.reply_chat_action(action="typing")
    await asyncio.sleep(1)
    
    prediction = await ask_deepseek(question)
    
    response = f"""
üîÆ *–í–æ–ø—Ä–æ—Å:* {question}

‚ú® *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –û—Ä–∞–∫—É–ª–∞:*
{prediction}

üåô *–ü—É—Å—Ç—å –∑–≤–µ–∑–¥—ã –æ—Å–≤–µ—â–∞—é—Ç —Ç–≤–æ–π –ø—É—Ç—å...*
    """
    
    await update.message.reply_text(response, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
    üåü *–ü–æ–º–æ—â—å –û—Ä–∞–∫—É–ª–∞*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ
/ask [–≤–æ–ø—Ä–æ—Å] - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
/help - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

üí´ *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏* –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üîÆ Starting Oracle Bot...")
    
    if not TELEGRAM_TOKEN or not DEEPSEEK_API_KEY:
        print("‚ùå ERROR: Missing environment variables!")
        print("Please set TELEGRAM_TOKEN and DEEPSEEK_API_KEY")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
application.run_polling()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ask", ask_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚ú® Oracle Bot is running!")
    

if __name__ == '__main__':

    main()

